{"version":3,"sources":["index.js"],"names":["Word","word","setGuess","middleLetter","chunks","match","class","map","chunk","split","letter","onClick","Guess","checkAndAdd","Shuffle","shuffleLetteers","Reset","CurrentGuess","guess","CorrectGuesses","words","SpellingBee","letters","React","useState","myLetters","setLetters","dictionary","correctGuesses","setCorrectGuesses","msg","setMsg","a","includes","concat","shuffled","slice","sort","Math","random","join","ReactDOM","render","document","querySelector"],"mappings":"wLAIMA,G,MAAO,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAC1BC,EAASH,EAAKI,MAAM,WAExB,OACE,qBAAKC,MAAM,YAAX,SACGF,EAAOG,KAAI,SAACC,GAAD,OACV,qBAAKF,MAAM,MAAX,SACGE,EAAMC,MAAM,IAAIF,KAAI,SAACG,GAAD,OACjBA,GAAUP,EACX,wBACCG,MAAM,sBACNK,QAAS,WACPT,EAASQ,IAHZ,SAKEA,IAGH,wBACIJ,MAAM,iBACRK,QAAS,WACPT,EAASQ,IAHb,SAMGA,gBAUTE,EAAQ,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACf,OACE,wBAAQP,MAAM,iBAAiBK,QAAS,kBAAME,KAA9C,yBAMEC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACjB,OACE,wBAAQT,MAAO,iBAAiBK,QAAS,kBAAMI,KAA/C,8BAMEC,EAAQ,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SACf,OACE,wBAAQI,MAAM,iBAAiBK,QAAS,kBAAMT,EAAS,KAAvD,yBAMEe,EAAe,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtB,OAAO,8BAAMA,KAGTC,EAAiB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxB,OACE,gCACE,yCACA,6BACGA,EAAMb,KAAI,SAACN,GAAD,OACT,6BAAKA,aAOToB,EAAc,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASnB,EAAmB,EAAnBA,aAAmB,EACvBoB,IAAMC,SAAS,IADQ,mBAC1CN,EAD0C,KACnChB,EADmC,OAEjBqB,IAAMC,SAASF,GAFE,mBAE1CG,EAF0C,KAE/BC,EAF+B,KAQ3CC,EAAa,CAAC,YAAa,YAAa,UAAW,SAAU,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAR1c,EAULJ,IAAMC,SAAS,IAVV,mBAU1CI,EAV0C,KAU1BC,EAV0B,OAW3BN,IAAMC,SAAS,KAXY,mBAW1CM,EAX0C,KAWrCC,EAXqC,KAuCjD,OACE,gCACE,2DACA,8BACE,6BAAKD,MAEP,cAAC9B,EAAD,CAAMC,KAAMwB,EAAWvB,SAzCX,SAAC8B,GACf9B,EAASgB,EAAQc,IAwC6B7B,aAAcA,IAC1D,cAACS,EAAD,CAAOC,YAAa,kBAjCLZ,EAiCuBiB,EAhCxChB,EAAS,SACJD,EAAKgC,SAAS9B,GAIdwB,EAAWM,SAAShC,GAKrB2B,EAAeK,SAAShC,GAC1B8B,EAAO,sBAAwB9B,EAAO,OAIxC8B,EAAO,cAAgB9B,EAAO,gBAC9B4B,EAAkBD,EAAeM,OAAOjC,KAVtC8B,EAAO,qBAAuB9B,EAAO,KAJrC8B,EAAO,uCAHO,IAAC9B,KAkCf,cAACe,EAAD,CAAOd,SAAUA,IACjB,cAACY,EAAD,CAASC,gBAfQ,WACnB,IACIoB,GADaV,EAAUW,MAAM,EAAG,GAAKX,EAAUW,MAAM,IAC/B3B,MAAM,IAAI4B,MAAK,WAAW,MAAO,GAAIC,KAAKC,YAAWC,KAAK,IACpFd,EAAWS,EAASC,MAAM,EAAE,GAAKX,EAAU,GAAKU,EAASC,MAAM,OAa7D,cAACnB,EAAD,CAAcC,MAAOA,IACrB,cAACC,EAAD,CAAgBC,MAAOQ,QAK7Ba,IAASC,OACP,cAACrB,EAAD,CAAaC,QAAQ,UAAUnB,aAAa,MAC5CwC,SAASC,cAAc,Y","file":"static/js/main.a62a1dfa.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\n\nconst Word = ({ word, setGuess, middleLetter }) => {\n  var chunks = word.match(/.{1,3}/g);\n\n  return (\n    <div class=\"container\">\n      {chunks.map((chunk) => (\n        <div class=\"row\">\n          {chunk.split(\"\").map((letter) => (\n            ((letter == middleLetter) ?\n            (<button\n              class=\"button buttonMiddle\"\n              onClick={() => {\n                setGuess(letter);\n              }}>\n              {letter}\n              </button>)\n            :\n            <button\n                class=\"button button5\"\n              onClick={() => {\n                setGuess(letter);\n              }}\n            >\n              {letter}\n              </button>))\n\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Guess = ({ checkAndAdd }) => {\n  return (\n    <button class=\"button button2\" onClick={() => checkAndAdd()}>\n      Guess Word\n    </button>\n  );\n};\n\nconst Shuffle = ({ shuffleLetteers }) => {\n  return (\n    <button class =\"button button2\" onClick={() => shuffleLetteers()}>\n      Shuffle Letters\n    </button>\n  )\n}\n\nconst Reset = ({ setGuess }) => {\n  return (\n    <button class=\"button button2\" onClick={() => setGuess(\"\")}>\n      Reset Word\n    </button>\n  );\n};\n\nconst CurrentGuess = ({ guess }) => {\n  return <div>{guess}</div>;\n};\n\nconst CorrectGuesses = ({ words }) => {\n  return (\n    <div>\n      <h2>Answers</h2>\n      <ol>\n        {words.map((word) => (\n          <li>{word}</li>\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nconst SpellingBee = ({ letters, middleLetter }) => {\n  const [guess, setGuess] = React.useState(\"\");\n  const [myLetters, setLetters] = React.useState(letters);\n\n  var addLetter = (a) => {\n    setGuess(guess + a);\n  };\n\n  const dictionary = [\"bamboozle\", \"blameable\", \"emblaze\", \"ablaze\", \"embalm\", \"emblem\", \"bamboo\", \"amoeba\", \"booze\", \"mambo\", \"bloom\", \"mamba\", \"bezel\", \"able\", \"alma\", \"aloe\", \"babe\", \"bale\", \"baba\", \"ball\", \"balm\", \"beam\", \"bell\", \"blam\", \"blob\", \"boba\", \"boll\", \"bolo\", \"bomb\", \"boob\", \"boom\", \"lamb\", \"lame\", \"laze\", \"lobe\", \"loom\", \"male\", \"mall\", \"maze\", \"meal\", \"mole\", \"moll\", \"oboe\", \"ooze\", \"zeal\", \"zoom\", \"all\", \"ale\", \"baa\", \"bee\", \"boo\", \"bob\", \"ebb\", \"eel\", \"elm\", \"lab\", \"lob\", \"mam\", \"mob\", \"moo\"];\n\n  const [correctGuesses, setCorrectGuesses] = React.useState([]);\n  const [msg, setMsg] = React.useState(\" \");\n\n  var checkAndAdd = (word) => {\n    setGuess(\"\");\n    if (!word.includes(middleLetter)) {\n      setMsg(\"You have to use the middle letter!\");\n      return;\n    }\n    if (!dictionary.includes(word)) {\n      setMsg(\"Incorrect guess: '\" + word + \"'\");\n      return;\n    }\n\n    if (correctGuesses.includes(word)) {\n      setMsg(\"You already found '\" + word + \"'!\");\n      return;\n    }\n\n    setMsg(\"Nice one! '\" + word + \"' is a word!\");\n    setCorrectGuesses(correctGuesses.concat(word));\n  };\n\n  var shuffleLetters = () => {\n    var newLetters = myLetters.slice(0, 4) + myLetters.slice(5);\n    var shuffled = newLetters.split('').sort(function(){return 0.5-Math.random()}).join('');\n    setLetters(shuffled.slice(0,4) + myLetters[4] + shuffled.slice(4));\n  };\n\n  return (\n    <div>\n      <h1>Adam's Spelling Bee Game!</h1>\n      <div>\n        <h4>{msg}</h4>\n      </div>\n      <Word word={myLetters} setGuess={addLetter} middleLetter={middleLetter} />\n      <Guess checkAndAdd={() => checkAndAdd(guess)} />\n      <Reset setGuess={setGuess} />\n      <Shuffle shuffleLetteers={shuffleLetters} />\n      <CurrentGuess guess={guess} />\n      <CorrectGuesses words={correctGuesses} />\n    </div>\n  );\n};\n\nReactDOM.render(\n  <SpellingBee letters=\"mableoz\" middleLetter=\"e\" />,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}